/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oce;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class HR extends javax.swing.JFrame {

    final String DB_URL = "jdbc:derby:DB;create=true;";  //Database URL
    final String USER = "app";
    final String PASS = "app";
    boolean Changing = false;
    private String Username;
    private String Name;
    private String Password;
    DefaultListModel listModel1;
    DefaultListModel listModel2;
    String Pos;

    public HR() {
        initComponents();
    }

    public HR(String U, String N, String P) {
        initComponents();
        Username = U;
        Name = N;
        Password = P;
        Welc.setText("Welcome " + Name);
        ConfirmList();
        EmployeeList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Position = new javax.swing.ButtonGroup();
        Department = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        EmployeeL = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        ConfirmD = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Welc = new javax.swing.JLabel();
        Action = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        ConfirmL = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        Trainee = new javax.swing.JRadioButton();
        Employee = new javax.swing.JRadioButton();
        Manager = new javax.swing.JRadioButton();
        Refresh = new javax.swing.JButton();
        AdmissionB = new javax.swing.JRadioButton();
        HRB = new javax.swing.JRadioButton();
        TreasuryB = new javax.swing.JRadioButton();
        Reset = new javax.swing.JButton();
        SignOut = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Records = new javax.swing.JTextArea();
        ChangePass = new javax.swing.JButton();
        AddR = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Info = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Sal = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        NSal = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Employee usernames:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, 150, -1));

        EmployeeL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EmployeeLMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(EmployeeL);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 220, 190));

        jLabel3.setText(" Unconfirmed users:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 130, -1));

        ConfirmD.setText("Confirm Employment");
        ConfirmD.setOpaque(false);
        ConfirmD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmDActionPerformed(evt);
            }
        });
        getContentPane().add(ConfirmD, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 180, 170, -1));

        jButton4.setText("Delete Request");
        jButton4.setOpaque(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 250, 180, -1));
        getContentPane().add(Welc, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 20));

        Action.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Promote/Demote", "Fire" }));
        Action.setOpaque(false);
        Action.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ActionItemStateChanged(evt);
            }
        });
        getContentPane().add(Action, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 340, 130, -1));

        ConfirmL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ConfirmLMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ConfirmL);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 180, 180));

        jLabel5.setText("Actions:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, 70, 20));

        jToggleButton1.setText("Apply Action");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 370, 110, -1));

        Position.add(Trainee);
        Trainee.setText("Trainee");
        Trainee.setOpaque(false);
        getContentPane().add(Trainee, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 340, -1, -1));

        Position.add(Employee);
        Employee.setSelected(true);
        Employee.setText("Employee");
        Employee.setOpaque(false);
        getContentPane().add(Employee, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 340, -1, -1));

        Position.add(Manager);
        Manager.setText("Manager");
        Manager.setOpaque(false);
        getContentPane().add(Manager, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 340, -1, -1));

        Refresh.setText("Refresh Page");
        Refresh.setOpaque(false);
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });
        getContentPane().add(Refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 80, 140, -1));

        Department.add(AdmissionB);
        AdmissionB.setText("Admission");
        AdmissionB.setOpaque(false);
        getContentPane().add(AdmissionB, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, -1, -1));

        Department.add(HRB);
        HRB.setText("HR");
        HRB.setOpaque(false);
        getContentPane().add(HRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, -1, -1));

        Department.add(TreasuryB);
        TreasuryB.setText("Treasury");
        TreasuryB.setOpaque(false);
        getContentPane().add(TreasuryB, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, -1, -1));

        Reset.setText("Reset Password");
        Reset.setOpaque(false);
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });
        getContentPane().add(Reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 510, 150, -1));

        SignOut.setText("Sign Out");
        SignOut.setOpaque(false);
        SignOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignOutActionPerformed(evt);
            }
        });
        getContentPane().add(SignOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 0, 140, -1));

        Records.setColumns(20);
        Records.setRows(5);
        jScrollPane3.setViewportView(Records);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 420, 260, 110));

        ChangePass.setText("Change Password");
        ChangePass.setOpaque(false);
        ChangePass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangePassActionPerformed(evt);
            }
        });
        getContentPane().add(ChangePass, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 40, 140, -1));

        AddR.setText("Add Records");
        AddR.setOpaque(false);
        AddR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRActionPerformed(evt);
            }
        });
        getContentPane().add(AddR, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 530, 120, -1));

        jLabel4.setText("Information:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 550, 100, 20));

        Info.setEditable(false);
        Info.setColumns(20);
        Info.setRows(5);
        jScrollPane4.setViewportView(Info);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 570, 630, 110));

        jLabel6.setText("Add records:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 400, 100, -1));

        jLabel7.setText("Department:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 80, -1));

        jLabel8.setText("Positions:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 320, 90, -1));

        jLabel9.setText("Salary:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, 60, 20));

        Sal.setOpaque(false);
        getContentPane().add(Sal, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, 110, -1));

        jLabel10.setText("New Salary:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 440, 80, -1));
        getContentPane().add(NSal, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 460, 120, -1));

        jButton1.setText("Change Salary");
        jButton1.setOpaque(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 490, 120, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oce/Clouds.jpg"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, 680));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void SetPassword(String P)
    {
        Password=P;
    }
    public void ConfirmList() {
        String sql = "SELECT * FROM USERS";
        Connection conn = null;
        Statement stmt = null;
        try {
            //Register the JDBC driver
            Class.forName("com.mysql.jdbc.Driver");

            // Open a connection
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Connected to database.");

            //Execute query
            stmt = conn.createStatement();

            ResultSet rs = stmt.executeQuery(sql);
            listModel1 = new DefaultListModel();
            ConfirmL.setModel(listModel1);
            while (rs.next()) {
                if (rs.getString("DEPARTMENT").equals(" ")) {
                    listModel1.addElement(rs.getString("USERNAME") + ": " + rs.getString("Name"));
                }
            }
        } catch (Exception E) {
            E.printStackTrace();
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
    }

    public void EmployeeList() {
        String sql = "SELECT * FROM USERS";
        Connection conn = null;
        Statement stmt = null;
        try {
            //Register the JDBC driver
            Class.forName("com.mysql.jdbc.Driver");

            // Open a connection
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Connected to database.");

            //Execute query
            stmt = conn.createStatement();

            ResultSet rs = stmt.executeQuery(sql);
            listModel2 = new DefaultListModel();
            EmployeeL.setModel(listModel2);
            while (rs.next()) {
                if (!(rs.getString("USERNAME").toLowerCase().equals(Username.toLowerCase())) && !(rs.getString("DEPARTMENT").equals(" "))) {
                    listModel2.addElement(rs.getString("USERNAME") + ": " + rs.getString("Name") + " " + rs.getString("POSITION"));
                }
            }
        } catch (Exception E) {
            E.printStackTrace();
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
    }

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        ConfirmList();
        EmployeeList();
    }//GEN-LAST:event_RefreshActionPerformed

    private void SignOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignOutActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to sign out?", "Done?", JOptionPane.YES_NO_OPTION);
        if(reply==1)
        {
            return;
        }
        Login L = new Login();
        L.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_SignOutActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        int I[] = EmployeeL.getSelectedIndices();
        if (I.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select an employee.");
            return;
        }
        if (I.length > 1) {
            JOptionPane.showMessageDialog(this, "Please select only one employee.");
            return;
        }
        String User = listModel2.getElementAt(I[0]).toString();
        String[] Parts = User.split(": ");
        User = Parts[0];
        if (Action.getSelectedItem().toString().equals("Promote/Demote")) {
            int reply = 0;
            String NPos = Pos;
            if (Trainee.isSelected()) {
                if (Pos.equals("Trainee")) {
                    JOptionPane.showMessageDialog(this, "The employee is already a trainee.");
                    return;
                }
                reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to change the position of " + User + " from " + Pos + " to trainee?", "Change Position?", JOptionPane.YES_NO_OPTION);
                NPos = "Trainee";
            }
            if (Employee.isSelected()) {
                if (Pos.equals("Employee")) {
                    JOptionPane.showMessageDialog(this, "The employee is already an employee.");
                    return;
                }
                reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to change the position of " + User + " from " + Pos + " to employee?", "Change Position?", JOptionPane.YES_NO_OPTION);
                NPos = "Employee";
            }
            if (Manager.isSelected()) {
                if (Pos.equals("Manager")) {
                    JOptionPane.showMessageDialog(this, "The employee is already a manager.");
                    return;
                }
                reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to change the position of " + User + " from " + Pos + " to manager?", "Change Position?", JOptionPane.YES_NO_OPTION);
                NPos = "Manager";
            }
            if (reply == 0) {
                String sql = "UPDATE USERS SET POSITION ='" + NPos + "' WHERE USERNAME='" + User + "'";
                Connection conn = null;
                Statement stmt = null;
                try {
                    //Register the JDBC driver
                    Class.forName("com.mysql.jdbc.Driver");

                    // Open a connection
                    conn = DriverManager.getConnection(DB_URL, USER, PASS);
                    System.out.println("Connected to database.");

                    //Execute query
                    stmt = conn.createStatement();

                    stmt.execute(sql);
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    try {
                        if (conn != null) {
                            conn.close();
                        }
                    } catch (SQLException se) {
                        se.printStackTrace();
                    }
                }
            } else {
                return;
            }
        } else {
            int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to fire  " + User + "?", "Fire Employee?", JOptionPane.YES_NO_OPTION);
            if (reply == 1) {
                return;
            } else {
                String sql = "DELETE FROM USERS WHERE USERNAME ='" + User + "'";
                Connection conn = null;
                Statement stmt = null;
                try {
                    //Register the JDBC driver
                    Class.forName("com.mysql.jdbc.Driver");

                    // Open a connection
                    conn = DriverManager.getConnection(DB_URL, USER, PASS);
                    System.out.println("Connected to database.");

                    //Execute query
                    stmt = conn.createStatement();
                    stmt.execute(sql);
                    JOptionPane.showMessageDialog(this, "Deleted " + User + ".");
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    try {
                        if (conn != null) {
                            conn.close();
                        }
                    } catch (SQLException se) {
                        se.printStackTrace();
                    }
                }
            }
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void ChangePassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangePassActionPerformed
        if (Changing == false) {
            Changing = true;
            ChangePass CP = new ChangePass(Password, Username, this);
            CP.setVisible(true);
        }
    }//GEN-LAST:event_ChangePassActionPerformed

    public void Radio() {

        int I[] = EmployeeL.getSelectedIndices();
        if (I.length == 0) {
            return;
        }
        if (I.length > 1) {
            return;
        }
        if (Action.getSelectedItem().toString().equals("Promote/Demote")) {
            Trainee.setVisible(true);
            Manager.setVisible(true);
            Employee.setVisible(true);
            if (Pos.equals("Trainee")) {
                Employee.setSelected(true);
            } else if (Pos.equals("Employee")) {
                Manager.setSelected(true);
            } else if (Pos.equals("Manager")) {
                return;
            }
        }
        if (Action.getSelectedItem().toString().equals("Fire")) {
            Trainee.setVisible(false);
            Manager.setVisible(false);
            Employee.setVisible(false);
        }
    }

    private void EmployeeLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeLMouseClicked
        int I[] = EmployeeL.getSelectedIndices();
        if (I.length == 0) {
            return;
        }
        if (I.length == 1) {
            String User = listModel2.getElementAt(I[0]).toString();
            String[] Parts = User.split(": ");
            User = Parts[0];
            String sql = "SELECT * FROM USERS";
            Connection conn = null;
            Statement stmt = null;
            try {
                //Register the JDBC driver
                Class.forName("com.mysql.jdbc.Driver");

                // Open a connection
                conn = DriverManager.getConnection(DB_URL, USER, PASS);
                System.out.println("Connected to database.");

                //Execute query
                stmt = conn.createStatement();

                ResultSet rs = stmt.executeQuery(sql);
                while (rs.next()) {
                    if (rs.getString("Username").toLowerCase().equals(User.toLowerCase())) {
                        Info.setText("Username: " + rs.getString("USERNAME") + "\nName: " + rs.getString("NAME") + "\nDepartment: " + rs.getString("DEPARTMENT") + "\nPosition: " + rs.getString("POSITION") + "\nEmail: " + rs.getString("EMAIL") + "\nPhone Number: " + rs.getString("PHONE") + "\nDate of birth: " + rs.getString("BIRTH") + "\nSalary: " + rs.getDouble("SALARY") + "\nRecords: " + rs.getString("RECORDS"));
                        Pos = rs.getString("POSITION");
                        Radio();
                        return;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException se) {
                    se.printStackTrace();
                }
            }
        } else if (I.length > 1) {
            JOptionPane.showMessageDialog(this, "Please select only one employee.");
            return;
        }
    }//GEN-LAST:event_EmployeeLMouseClicked

    private void ConfirmLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConfirmLMouseClicked
        int I[] = ConfirmL.getSelectedIndices();
        if (I.length == 0) {
            return;
        }
        if (I.length == 1) {
            String User = listModel1.getElementAt(I[0]).toString();
            String[] Parts = User.split(": ");
            User = Parts[0];
            String sql = "SELECT * FROM USERS";
            Connection conn = null;
            Statement stmt = null;
            try {
                //Register the JDBC driver
                Class.forName("com.mysql.jdbc.Driver");

                // Open a connection
                conn = DriverManager.getConnection(DB_URL, USER, PASS);
                System.out.println("Connected to database.");

                //Execute query
                stmt = conn.createStatement();

                ResultSet rs = stmt.executeQuery(sql);
                while (rs.next()) {
                    if (rs.getString("Username").toLowerCase().equals(User.toLowerCase())) {
                        Info.setText("Username: " + rs.getString("USERNAME") + "\nName: " + rs.getString("NAME") + "\nPosition: Applicant\nEmail: " + rs.getString("EMAIL") + "\nPhone Number: " + rs.getString("PHONE") + "\nDate of birth: " + rs.getString("BIRTH"));
                        return;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException se) {
                    se.printStackTrace();
                }
            }
        } else if (I.length > 1) {
            JOptionPane.showMessageDialog(this, "Please select only one user.");
            return;
        }
    }//GEN-LAST:event_ConfirmLMouseClicked

    private void ConfirmDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmDActionPerformed
        int I[] = ConfirmL.getSelectedIndices();
        double Salary = 0;
        if (I.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select a user.");
            return;
        }
        try {
            Salary = Double.parseDouble(Sal.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter a salary.");
            return;
        }
        if (I.length == 1) {
            String User = listModel1.getElementAt(I[0]).toString();
            String[] Parts = User.split(": ");
            User = Parts[0];
            String sql;
            if (HRB.isSelected()) {
                sql = "UPDATE USERS SET DEPARTMENT = 'HR' WHERE USERNAME = '" + User + "'";
            } else if (AdmissionB.isSelected()) {
                sql = "UPDATE USERS SET DEPARTMENT = 'Admission' WHERE USERNAME = '" + User + "'";
            } else if (TreasuryB.isSelected()) {
                sql = "UPDATE USERS SET DEPARTMENT = 'Treasury' WHERE USERNAME = '" + User + "'";
            } else {
                JOptionPane.showMessageDialog(this, "Please select a department.");
                return;
            }
            Connection conn = null;
            Statement stmt = null;
            try {
                //Register the JDBC driver
                Class.forName("com.mysql.jdbc.Driver");

                // Open a connection
                conn = DriverManager.getConnection(DB_URL, USER, PASS);
                System.out.println("Connected to database.");

                //Execute query
                stmt = conn.createStatement();
                stmt.execute(sql);
                sql = "UPDATE USERS SET POSITION = 'Trainee' WHERE USERNAME = '" + User + "'";
                stmt.execute(sql);
                sql = "UPDATE USERS SET RECORDS = 'Account confirmed by " + Username + ".\n' WHERE USERNAME = '" + User + "'";
                stmt.execute(sql);
                sql = "UPDATE USERS SET SALARY = " + Salary + " WHERE USERNAME = '" + User + "'";
                stmt.execute(sql);
                EmployeeList();
                ConfirmList();
                JOptionPane.showMessageDialog(this, "Account confirmed.");
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException se) {
                    se.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select one user only.");
            return;
        }
    }//GEN-LAST:event_ConfirmDActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int I[] = ConfirmL.getSelectedIndices();
        double Salary = 0;
        if (I.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select a user.");
            return;
        }
        if (I.length == 1) {
            String User = listModel1.getElementAt(I[0]).toString();
            String[] Parts = User.split(": ");
            User = Parts[0];
            String sql;
            sql = "DELETE FROM USERS WHERE USERNAME = '" + User + "'";
            Connection conn = null;
            Statement stmt = null;
            try {
                //Register the JDBC driver
                Class.forName("com.mysql.jdbc.Driver");

                // Open a connection
                conn = DriverManager.getConnection(DB_URL, USER, PASS);
                System.out.println("Connected to database.");

                //Execute query
                stmt = conn.createStatement();
                stmt.execute(sql);
                EmployeeList();
                ConfirmList();
                JOptionPane.showMessageDialog(this, "Account deleted.");
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException se) {
                    se.printStackTrace();
                }
            }
        } else if (I.length > 1) {
            JOptionPane.showMessageDialog(this, "Please select only one user.");
            return;
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void AddRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRActionPerformed
        String UR = Records.getText();
        if (UR.equals("")) {
            JOptionPane.showMessageDialog(this, "Please write a record.");
            return;
        }
        int I[] = EmployeeL.getSelectedIndices();
        if (I.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select an employee.");
            return;
        }
        if (I.length == 1) {
            String User = listModel2.getElementAt(I[0]).toString();
            String[] Parts = User.split(": ");
            User = Parts[0];
            String sql;
            sql = "SELECT * FROM USERS";
            Connection conn = null;
            Statement stmt = null;
            try {
                //Register the JDBC driver
                Class.forName("com.mysql.jdbc.Driver");

                // Open a connection
                conn = DriverManager.getConnection(DB_URL, USER, PASS);
                System.out.println("Connected to database.");

                //Execute query
                stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql);
                String R;
                while (rs.next()) {
                    if (rs.getString("USERNAME").toLowerCase().equals(User.toLowerCase())) {
                        R = rs.getString("RECORDS");
                        sql = "UPDATE USERS SET RECORDS = '" + R + "\n" + Username + " added:\n" + UR + "' WHERE USERNAME = '" + User + "'";
                        JOptionPane.showMessageDialog(this, "Records added.");
                        return;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException se) {
                    se.printStackTrace();
                }
            }
        } else if (I.length > 1) {
            JOptionPane.showMessageDialog(this, "Please select only one employee.");
            return;
        }
    }//GEN-LAST:event_AddRActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        int I[] = EmployeeL.getSelectedIndices();
        if (I.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select an employee.");
            return;
        }
        if (I.length == 1) {
            String User = listModel2.getElementAt(I[0]).toString();
            String[] Parts = User.split(": ");
            User = Parts[0];
            int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to reset the password of " + User + "?", "Reset Password?", JOptionPane.YES_NO_OPTION);
            if (reply == 1) {
                return;
            }
            String sql = "SELECT * FROM USERS";
            Connection conn = null;
            Statement stmt = null;
            try {
                //Register the JDBC driver
                Class.forName("com.mysql.jdbc.Driver");

                // Open a connection
                conn = DriverManager.getConnection(DB_URL, USER, PASS);
                System.out.println("Connected to database.");

                //Execute query
                stmt = conn.createStatement();

                ResultSet rs = stmt.executeQuery(sql);
                String NP;
                while (rs.next()) {
                    if (rs.getString("USERNAME").toLowerCase().equals(User.toLowerCase())) {
                        NP = rs.getString("BIRTH");
                        sql = "UPDATE USERS SET PASSWORD ='" + NP + "' WHERE USERNAME= '" + User + "'";
                        stmt.execute(sql);
                        JOptionPane.showMessageDialog(this, "Password has been reset to the user's birth date.");
                        return;
                    }
                }
            } catch (Exception E) {
                E.printStackTrace();
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException se) {
                    se.printStackTrace();
                }
            }
        } else if (I.length > 1) {
            JOptionPane.showMessageDialog(this, "Please select only one employee.");
            return;
        }
    }//GEN-LAST:event_ResetActionPerformed

    private void ActionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ActionItemStateChanged

        int I[] = EmployeeL.getSelectedIndices();
        if (I.length == 0) {
            return;
        }
        if (I.length > 1) {
            return;
        }
        if (Action.getSelectedItem().toString().equals("Promote/Demote")) {
            Trainee.setVisible(true);
            Manager.setVisible(true);
            Employee.setVisible(true);
            if (Pos.equals("Trainee")) {
                Employee.setSelected(true);
            } else if (Pos.equals("Employee")) {
                Manager.setSelected(true);
            } else if (Pos.equals("Manager")) {
                return;
            }
        }
        if (Action.getSelectedItem().toString().equals("Fire")) {
            Trainee.setVisible(false);
            Manager.setVisible(false);
            Employee.setVisible(false);
        }
    }//GEN-LAST:event_ActionItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int I[] = EmployeeL.getSelectedIndices();
        if (I.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select an employee.");
            return;
        }
        if (I.length > 1) {
            JOptionPane.showMessageDialog(this, "Please select only one employee.");
            return;
        }
        String User = listModel2.getElementAt(I[0]).toString();
        String[] Parts = User.split(": ");
        User = Parts[0];
        double Salary;
        try {
            Salary = Double.parseDouble(NSal.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter a salary.");
            return;
        }
        String sql = "UPDATE USERS SET SALARY =" + Salary + " *WHERE USERNAME ='" + User + "'";
        Connection conn = null;
        Statement stmt = null;
        try {
            //Register the JDBC driver
            Class.forName("com.mysql.jdbc.Driver");

            // Open a connection
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Connected to database.");

            //Execute query
            stmt = conn.createStatement();
            stmt.execute(sql);

        } catch (Exception E) {
            E.printStackTrace();
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HR().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Action;
    private javax.swing.JButton AddR;
    private javax.swing.JRadioButton AdmissionB;
    private javax.swing.JButton ChangePass;
    private javax.swing.JButton ConfirmD;
    private javax.swing.JList ConfirmL;
    private javax.swing.ButtonGroup Department;
    private javax.swing.JRadioButton Employee;
    private javax.swing.JList EmployeeL;
    private javax.swing.JRadioButton HRB;
    private javax.swing.JTextArea Info;
    private javax.swing.JRadioButton Manager;
    private javax.swing.JTextField NSal;
    private javax.swing.ButtonGroup Position;
    private javax.swing.JTextArea Records;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton Reset;
    private javax.swing.JTextField Sal;
    private javax.swing.JButton SignOut;
    private javax.swing.JRadioButton Trainee;
    private javax.swing.JRadioButton TreasuryB;
    private javax.swing.JLabel Welc;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
